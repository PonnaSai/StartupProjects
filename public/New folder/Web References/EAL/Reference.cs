//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.17929.
// 
#pragma warning disable 1591

namespace BalanceTransfer.EAL {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="EALServiceSoap", Namespace="http://fis.it.utility/EALService")]
    public partial class EALService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback PingOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReloadConfigSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogInfoWithMsgIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogInfoWithMsgIDAndOverrideOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogInfoWithOverrideOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAppInfoOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public EALService() {
            this.Url = global::BalanceTransfer.Properties.Settings.Default.BalanceTransfer_EAL_EALService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event PingCompletedEventHandler PingCompleted;
        
        /// <remarks/>
        public event ReloadConfigSettingsCompletedEventHandler ReloadConfigSettingsCompleted;
        
        /// <remarks/>
        public event LogInfoCompletedEventHandler LogInfoCompleted;
        
        /// <remarks/>
        public event LogInfoWithMsgIDCompletedEventHandler LogInfoWithMsgIDCompleted;
        
        /// <remarks/>
        public event LogInfoWithMsgIDAndOverrideCompletedEventHandler LogInfoWithMsgIDAndOverrideCompleted;
        
        /// <remarks/>
        public event LogInfoWithOverrideCompletedEventHandler LogInfoWithOverrideCompleted;
        
        /// <remarks/>
        public event GetAppInfoCompletedEventHandler GetAppInfoCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://fis.it.utility/EALService/Ping", RequestNamespace="http://fis.it.utility/EALService", ResponseNamespace="http://fis.it.utility/EALService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Ping() {
            object[] results = this.Invoke("Ping", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PingAsync() {
            this.PingAsync(null);
        }
        
        /// <remarks/>
        public void PingAsync(object userState) {
            if ((this.PingOperationCompleted == null)) {
                this.PingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPingOperationCompleted);
            }
            this.InvokeAsync("Ping", new object[0], this.PingOperationCompleted, userState);
        }
        
        private void OnPingOperationCompleted(object arg) {
            if ((this.PingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PingCompleted(this, new PingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://fis.it.utility/EALService/ReloadConfigSettings", RequestNamespace="http://fis.it.utility/EALService", ResponseNamespace="http://fis.it.utility/EALService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ReloadConfigSettings() {
            object[] results = this.Invoke("ReloadConfigSettings", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ReloadConfigSettingsAsync() {
            this.ReloadConfigSettingsAsync(null);
        }
        
        /// <remarks/>
        public void ReloadConfigSettingsAsync(object userState) {
            if ((this.ReloadConfigSettingsOperationCompleted == null)) {
                this.ReloadConfigSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReloadConfigSettingsOperationCompleted);
            }
            this.InvokeAsync("ReloadConfigSettings", new object[0], this.ReloadConfigSettingsOperationCompleted, userState);
        }
        
        private void OnReloadConfigSettingsOperationCompleted(object arg) {
            if ((this.ReloadConfigSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReloadConfigSettingsCompleted(this, new ReloadConfigSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://fis.it.utility/EALService/LogInfo", RequestNamespace="http://fis.it.utility/EALService", OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void LogInfo(int ApplicationID, SEVERITY LogSeverity, string Message, string ServerName, string AdditionalDatastring) {
            this.Invoke("LogInfo", new object[] {
                        ApplicationID,
                        LogSeverity,
                        Message,
                        ServerName,
                        AdditionalDatastring});
        }
        
        /// <remarks/>
        public void LogInfoAsync(int ApplicationID, SEVERITY LogSeverity, string Message, string ServerName, string AdditionalDatastring) {
            this.LogInfoAsync(ApplicationID, LogSeverity, Message, ServerName, AdditionalDatastring, null);
        }
        
        /// <remarks/>
        public void LogInfoAsync(int ApplicationID, SEVERITY LogSeverity, string Message, string ServerName, string AdditionalDatastring, object userState) {
            if ((this.LogInfoOperationCompleted == null)) {
                this.LogInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogInfoOperationCompleted);
            }
            this.InvokeAsync("LogInfo", new object[] {
                        ApplicationID,
                        LogSeverity,
                        Message,
                        ServerName,
                        AdditionalDatastring}, this.LogInfoOperationCompleted, userState);
        }
        
        private void OnLogInfoOperationCompleted(object arg) {
            if ((this.LogInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogInfoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://fis.it.utility/EALService/LogInfoWithMsgID", RequestNamespace="http://fis.it.utility/EALService", OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void LogInfoWithMsgID(int ApplicationID, SEVERITY LogSeverity, string Message, string ServerName, string AdditionalDatastring, int MessageID) {
            this.Invoke("LogInfoWithMsgID", new object[] {
                        ApplicationID,
                        LogSeverity,
                        Message,
                        ServerName,
                        AdditionalDatastring,
                        MessageID});
        }
        
        /// <remarks/>
        public void LogInfoWithMsgIDAsync(int ApplicationID, SEVERITY LogSeverity, string Message, string ServerName, string AdditionalDatastring, int MessageID) {
            this.LogInfoWithMsgIDAsync(ApplicationID, LogSeverity, Message, ServerName, AdditionalDatastring, MessageID, null);
        }
        
        /// <remarks/>
        public void LogInfoWithMsgIDAsync(int ApplicationID, SEVERITY LogSeverity, string Message, string ServerName, string AdditionalDatastring, int MessageID, object userState) {
            if ((this.LogInfoWithMsgIDOperationCompleted == null)) {
                this.LogInfoWithMsgIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogInfoWithMsgIDOperationCompleted);
            }
            this.InvokeAsync("LogInfoWithMsgID", new object[] {
                        ApplicationID,
                        LogSeverity,
                        Message,
                        ServerName,
                        AdditionalDatastring,
                        MessageID}, this.LogInfoWithMsgIDOperationCompleted, userState);
        }
        
        private void OnLogInfoWithMsgIDOperationCompleted(object arg) {
            if ((this.LogInfoWithMsgIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogInfoWithMsgIDCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://fis.it.utility/EALService/LogInfoWithMsgIDAndOverride", RequestNamespace="http://fis.it.utility/EALService", OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void LogInfoWithMsgIDAndOverride(int ApplicationID, SEVERITY LogSeverity, string Message, string ServerName, string AdditionalDatastring, string OverrideSubjectLine, string OverrideEMailFrom, string OverrideEMailTo, int MessageID) {
            this.Invoke("LogInfoWithMsgIDAndOverride", new object[] {
                        ApplicationID,
                        LogSeverity,
                        Message,
                        ServerName,
                        AdditionalDatastring,
                        OverrideSubjectLine,
                        OverrideEMailFrom,
                        OverrideEMailTo,
                        MessageID});
        }
        
        /// <remarks/>
        public void LogInfoWithMsgIDAndOverrideAsync(int ApplicationID, SEVERITY LogSeverity, string Message, string ServerName, string AdditionalDatastring, string OverrideSubjectLine, string OverrideEMailFrom, string OverrideEMailTo, int MessageID) {
            this.LogInfoWithMsgIDAndOverrideAsync(ApplicationID, LogSeverity, Message, ServerName, AdditionalDatastring, OverrideSubjectLine, OverrideEMailFrom, OverrideEMailTo, MessageID, null);
        }
        
        /// <remarks/>
        public void LogInfoWithMsgIDAndOverrideAsync(int ApplicationID, SEVERITY LogSeverity, string Message, string ServerName, string AdditionalDatastring, string OverrideSubjectLine, string OverrideEMailFrom, string OverrideEMailTo, int MessageID, object userState) {
            if ((this.LogInfoWithMsgIDAndOverrideOperationCompleted == null)) {
                this.LogInfoWithMsgIDAndOverrideOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogInfoWithMsgIDAndOverrideOperationCompleted);
            }
            this.InvokeAsync("LogInfoWithMsgIDAndOverride", new object[] {
                        ApplicationID,
                        LogSeverity,
                        Message,
                        ServerName,
                        AdditionalDatastring,
                        OverrideSubjectLine,
                        OverrideEMailFrom,
                        OverrideEMailTo,
                        MessageID}, this.LogInfoWithMsgIDAndOverrideOperationCompleted, userState);
        }
        
        private void OnLogInfoWithMsgIDAndOverrideOperationCompleted(object arg) {
            if ((this.LogInfoWithMsgIDAndOverrideCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogInfoWithMsgIDAndOverrideCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://fis.it.utility/EALService/LogInfoWithOverride", RequestNamespace="http://fis.it.utility/EALService", OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void LogInfoWithOverride(int ApplicationID, SEVERITY LogSeverity, string Message, string ServerName, string AdditionalDatastring, string OverrideSubjectLine, string OverrideEMailFrom, string OverrideEMailTo) {
            this.Invoke("LogInfoWithOverride", new object[] {
                        ApplicationID,
                        LogSeverity,
                        Message,
                        ServerName,
                        AdditionalDatastring,
                        OverrideSubjectLine,
                        OverrideEMailFrom,
                        OverrideEMailTo});
        }
        
        /// <remarks/>
        public void LogInfoWithOverrideAsync(int ApplicationID, SEVERITY LogSeverity, string Message, string ServerName, string AdditionalDatastring, string OverrideSubjectLine, string OverrideEMailFrom, string OverrideEMailTo) {
            this.LogInfoWithOverrideAsync(ApplicationID, LogSeverity, Message, ServerName, AdditionalDatastring, OverrideSubjectLine, OverrideEMailFrom, OverrideEMailTo, null);
        }
        
        /// <remarks/>
        public void LogInfoWithOverrideAsync(int ApplicationID, SEVERITY LogSeverity, string Message, string ServerName, string AdditionalDatastring, string OverrideSubjectLine, string OverrideEMailFrom, string OverrideEMailTo, object userState) {
            if ((this.LogInfoWithOverrideOperationCompleted == null)) {
                this.LogInfoWithOverrideOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogInfoWithOverrideOperationCompleted);
            }
            this.InvokeAsync("LogInfoWithOverride", new object[] {
                        ApplicationID,
                        LogSeverity,
                        Message,
                        ServerName,
                        AdditionalDatastring,
                        OverrideSubjectLine,
                        OverrideEMailFrom,
                        OverrideEMailTo}, this.LogInfoWithOverrideOperationCompleted, userState);
        }
        
        private void OnLogInfoWithOverrideOperationCompleted(object arg) {
            if ((this.LogInfoWithOverrideCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogInfoWithOverrideCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://fis.it.utility/EALService/GetAppInfo", RequestNamespace="http://fis.it.utility/EALService", ResponseNamespace="http://fis.it.utility/EALService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetAppInfo(int ApplicationID, out bool AlertAllowed, out bool EMailAllowed, out bool LogAllowed, out SEVERITY AppSeverity) {
            object[] results = this.Invoke("GetAppInfo", new object[] {
                        ApplicationID});
            AlertAllowed = ((bool)(results[1]));
            EMailAllowed = ((bool)(results[2]));
            LogAllowed = ((bool)(results[3]));
            AppSeverity = ((SEVERITY)(results[4]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetAppInfoAsync(int ApplicationID) {
            this.GetAppInfoAsync(ApplicationID, null);
        }
        
        /// <remarks/>
        public void GetAppInfoAsync(int ApplicationID, object userState) {
            if ((this.GetAppInfoOperationCompleted == null)) {
                this.GetAppInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAppInfoOperationCompleted);
            }
            this.InvokeAsync("GetAppInfo", new object[] {
                        ApplicationID}, this.GetAppInfoOperationCompleted, userState);
        }
        
        private void OnGetAppInfoOperationCompleted(object arg) {
            if ((this.GetAppInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAppInfoCompleted(this, new GetAppInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://fis.it.utility/EALService")]
    public enum SEVERITY {
        
        /// <remarks/>
        DEBUG,
        
        /// <remarks/>
        INFO,
        
        /// <remarks/>
        NOTIFY,
        
        /// <remarks/>
        ERROR,
        
        /// <remarks/>
        SEVERE,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void PingCompletedEventHandler(object sender, PingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void ReloadConfigSettingsCompletedEventHandler(object sender, ReloadConfigSettingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReloadConfigSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReloadConfigSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void LogInfoCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void LogInfoWithMsgIDCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void LogInfoWithMsgIDAndOverrideCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void LogInfoWithOverrideCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAppInfoCompletedEventHandler(object sender, GetAppInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAppInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAppInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool AlertAllowed {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public bool EMailAllowed {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public bool LogAllowed {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public SEVERITY AppSeverity {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SEVERITY)(this.results[4]));
            }
        }
    }
}

#pragma warning restore 1591